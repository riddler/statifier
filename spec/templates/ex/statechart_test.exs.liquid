# AUTOGENERATED FILE - DO NOT EDIT

defmodule Statifier.Spec.<%= spec.specid %>Test do
  use ExUnit.Case, async: true

  @moduletag spec_id: "<%= spec.specid %>"
  @moduletag spec_group: "<%= spec.specgroup %>"
  @moduletag spec_subject: "Statechart"
  @moduletag spec_description: """
  <%= spec.description %>
  """
  @moduletag spec_statechart: <%= spec.statechart | elixir_map %>

  {% comment %}
  alias Statifier.Statechart

  setup_all do
    %{instructions: <%= instructions %>}
  end
<% tests.each do |test| %>
  test "<%= test["name"] %>", context do
    predicate_context = <% if test["context"].nil? %>nil<% else %><%= elixir_hash test["context"] %><% end %>
    expected_result = <% if test["result"].nil? %>nil<% else %><%= test["result"] %><% end %>

    result = Predicator.Evaluator.execute context[:instructions], predicate_context
    assert expected_result == result
    #assert_empty e.stack
  end
 {% endcomment %}
<% end %>
end
{% comment %}
defmodule Statifier.Spec. do
  use ExUnit.Case

  alias Statifier.{Statechart, StateDef}

  # Definied in test helper
  alias Statifier.Spec

  test "building basic statechart" do
    test_path = Path.join(File.cwd!(), "test/fixtures/basic.yml")

    {:ok, test_config} = YamlElixir.read_from_file(test_path)

    sc = Statechart.build(test_config["statechart"])

    assert %Statechart{
             name: "Valid Single State",
             states: [%StateDef{id: "greeting"} | _rest]
           } = sc
  end

  # This corresponds to the <scxml> element defined here:
  # https://www.w3.org/TR/scxml/#scxml

  # A conformant SCXML document must have at least one <state>, <parallel> or
  # <final> child.
  test "conformance: at least one state" do
    spec = Spec.from_fixture("basic.yml")

    sc =
      Statechart.build(spec.statechart)
      |> Statechart.validate()

    assert %Statechart{conformant: true} = sc
  end
end
{% endcomment %}
